{"version":3,"sources":["Resources/correct.mp3","Resources/wrong.wav","appconfig.js","Components/Home.js","graphql/queries.js","consts/Utilities.js","Components/Settings.js","Components/WorkFlow.js","graphql/mutations.js","Components/ResultPie.js","Components/ResultBar.js","consts/Const.js","Components/Questions.js","Components/Execise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","awsmobile","Auth","region","userPoolId","userPoolWebClientId","Home","props","state","loading","round","lastFinishedIndex","timeoutValue","this","query","graphqlOperation","data","errors","console","log","lenth","itemData","Object","keys","items","length","setState","itemId","Container","Row","Col","Card","className","style","width","key","Body","Link","as","to","pathname","execiseProps","flowStep","Component","Loading","Spinner","animation","size","role","aria-hidden","getFormatedDate","date","dd","String","getDate","padStart","mm","getMonth","getFullYear","getFormatedTimestamp","getHours","getMinutes","getSeconds","getFormatedTime","randomsort","a","b","Math","random","Settings","username","currentAuthenticatedUser","bypassCache","then","user","onClick","signOut","WorkFlow","firstTime","createGafiveHistory","updateGafiveHistory","ResultPie","labels","datasets","backgroundColor","hoverBackgroundColor","results","amountTrue","i","title","xs","Button","marginLeft","nextUrl","ResultBar","offset","centerPoint","indexOf","parseInt","slice","display","ButtonGroup","map","result","index","variant","Questions","Choises","contents","choises","A","B","C","D","Form","Group","sm","choise","Check","type","label","name","id","value","onChange","handleOptionChange","checked","selectedOption","disabled","buttonText","Jumbotron","base","translations","translation","split","show","positive","content","translate","idx","answer","Fade","in","Hint","Answer","Execise","handleSubmit","currentItem","currentIndex","nextItem","remainSeconds","location","resetCoundDown","clearInterval","interval","playPositiveSnd","playNegativeSnd","addHistory","sendHistory","historyId","updateHistoryReviewed","updateHistory","changeEvent","target","setInterval","tick","timesUp","organiseDate","existingItemsLen","Date","firstItemType","shuffleItemAnswers","mounted","bind","positiveSnd","Audio","negativeSnd","play","userAnswer","input","timestamp","response","genre","error","sort","mutation","mutations","limit","filter","eq","withRouter","Amplify","configure","awsconfig","App","Logger","LOG_LEVEL","basename","process","path","component","withAuthenticator","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fa8f056d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/correct.8e3d6124.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.43b2d487.wav\";","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://hkw5m5bzjnas3iy55rofoibh2a.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"AMAZON_COGNITO_USER_POOLS\",\n    Auth: {\n        region: 'us-east-1',\n        userPoolId: 'us-east-1_B78sn82ah',\n        userPoolWebClientId: '7nca7db89qqeddmt2rh90587c5',\n    }\n};\n\n\nexport default awsmobile;\n","\nimport React, { Component } from '../../node_modules/react';\nimport { Container, Row, Col, Card } from '../../node_modules/react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { graphqlOperation } from \"aws-amplify\";\n\nimport { Connect } from \"aws-amplify-react\";\nimport * as queries from '../graphql/queries';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: false,\n      round: 0,\n      lastFinishedIndex: -2,\n      timeoutValue: 30 // todo, configurable later\n    };\n  }\n\n  render () {\n        if (this.state.lastFinishedIndex === -2) \n          return (\n            <Connect query={graphqlOperation( queries.queryLastestIndex, {} )}>\n              {({ data, loading, errors }) => {\n                console.log ('rendering 1', data, loading, errors);\n                if (loading || !data) return (<h3>Loading...</h3>);\n                if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n                console.log ('rendering 2', data, loading, errors);\n                \n                const type = Object.keys(data)[0];\n                let itemData = data[type];\n\n                if (itemData.items.length === 0) \n                  this.setState({\n                    lastFinishedIndex: 0,\n                    round:1\n                  });\n                else \n                  this.setState({\n                    lastFinishedIndex: itemData.items[0].itemId,\n                    round: itemData.items[0].round\n                  });\n              }}\n            </Connect>\n          );\n\n        return (\n          <Container>\n              <Row>\n              <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='goover'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={{\n                               pathname:'/execise',\n                               execiseProps:{\n                                   flowStep: 'goover',\n                                   round: 1,//this.state.round,\n                                   lastFinishedIndex: this.state.lastFinishedIndex,\n                                   timeoutValue: this.state.timeoutValue\n                               }\n                               }}>Review</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='study'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={{\n                               pathname:'/execise',\n                               execiseProps:{\n                                   flowStep: 'study',\n                                   round: 1,//this.state.round,\n                                   lastFinishedIndex: this.state.lastFinishedIndex,\n                                   timeoutValue: this.state.timeoutValue\n                               }\n                               }}>Study</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n                <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/trends`}>Trends</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n                <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='setting'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/settings`}>Settings</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n              </Row>\n          </Container>\n        );\n    }\n}\n\nexport default Home","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getGaFiveQList = `query GetGaFiveQList($idx: String!, $index: Int!) {\n  getGAFiveQList(idx: $idx, index: $index) {\n    idx\n    index\n    base\n    A\n    B\n    C\n    D\n    Answer\n    Hint\n  }\n}\n`;\nexport const listGaFiveQLists = `query ListGaFiveQLists(\n  $filter: TableGAFiveQListFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listGAFiveQLists(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      idx\n      index\n      base\n      A\n      B\n      C\n      D\n      Answer\n      Hint\n      translation\n      type\n    }\n    nextToken\n  }\n}\n`;\nexport const queryQuestionsByIndex = `query QueryQuestionsByIndex($index: Int!, $limit: Int, $nextToken: String) {\n  queryQuestionsByIndex(index: $index, limit: $limit, nextToken: $nextToken) {\n    items {\n      idx\n      index\n      base\n      A\n      B\n      C\n      D\n      Answer\n      Hint\n      translation\n      type\n    }\n    nextToken\n  }\n}\n`;\nexport const getGafiveHistory = `query GetGafiveHistory($id: ID!) {\n  getGafiveHistory(id: $id) {\n    id\n    username\n    timestamp\n    itemId\n    response\n    result\n    round\n    genre\n  }\n}\n`;\nexport const listGafiveHistories = `query ListGafiveHistories(\n  $filter: TableGafiveHistoryFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listGafiveHistories(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      username\n      timestamp\n      itemId\n      response\n      result\n      round\n      genre\n    }\n    nextToken\n  }\n}\n`;\nexport const queryLastestIndex = `query QueryLastestIndex($round: Int) {\n  queryLastestIndex(round: $round) {\n    items {\n      id\n      username\n      timestamp\n      itemId\n      response\n      result\n      round\n      genre\n    }\n    nextToken\n  }\n}\n`;\nexport const getHistoryItemsList = `query GetHistoryItemsList(\n  $startFrom: String\n  $acsending: Boolean\n  $limit: Int\n  $filter: TableGafiveHistoryFilterInput\n  $nextToken: String\n) {\n  getHistoryItemsList(\n    startFrom: $startFrom\n    acsending: $acsending\n    limit: $limit\n    filter: $filter\n    nextToken: $nextToken\n  ) {\n    items {\n      id\n      username\n      timestamp\n      itemId\n      response\n      result\n      round\n      genre\n      content {\n        base\n        A\n        B\n        C\n        D\n        Answer\n        Hint\n        translation\n        type\n      }\n    }\n    nextToken\n  }\n}\n`;\n","import React from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nexport const Loading = () => {\n    return (\n        <div className=\"d-flex justify-content-center align-items-center\">\n        <Spinner\n            as=\"span\"\n            animation=\"grow\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n          />\n          Loading...\n          </div>\n    );\n}\n\n// Change date object to String YYYY-MM-DD format\nexport const getFormatedDate = (date) => {\n    \n    let dd = String(date.getDate()).padStart(2, '0');\n    let mm = String(date.getMonth() + 1).padStart(2, '0'); //January is 0!\n    let yyyy = date.getFullYear();\n    return (yyyy + '-' + mm + '-' + dd);\n\n };\n\n // Change date object to String HH:MM:SSZ format\nexport const getFormatedTime = (date) => {\n    \n    let hh = String(date.getHours()).padStart(2, '0');\n    let mi = String(date.getMinutes()).padStart(2, '0');\n    let ss = String(date.getSeconds()).padStart('2', 0);\n\n    return (hh + ':' + mi + ':' + ss + 'Z');\n\n };\n\n export const getFormatedTimestamp = (date) => {\n     return (getFormatedDate(date) + 'T' + getFormatedTime(date));\n }\n\n export const randomsort = (a, b) => {\n    return Math.random()>.5 ? -1 : 1;\n}","import React, { Component } from \"react\";\nimport { Auth } from 'aws-amplify';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Row, Col, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { Loading } from '../consts/Utilities';\n\n\nclass Settings extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            loading: true\n        };\n    }\n\n    componentDidMount() {\n        // const {session, part} = this.props.match.params;\n        // this.setState({session: session, part: part});\n\n        Auth.currentAuthenticatedUser({\n            bypassCache: false  \n        }).then(user => {\n            this.setState({username: user.username});\n        });\n    }\n    render () {\n\n        if (this.state.username === '') {\n            return (\n            <Container>\n            <Loading />\n            </Container>);\n        }\n\n        return (\n            <Container>\n                <Row>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/`}>Home</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='setting'>\n                        <Card.Body>\n                            <Card.Link as={Link} to={`#`} onClick={() => Auth.signOut()}>Sign Out {this.username}</Card.Link>\n                        </Card.Body>\n                    </Card>\n                 </Col>\n              </Row>\n            </Container>\n        )\n\n    }\n}\n\nexport default Settings","\nimport React, { Component } from '../../node_modules/react';\nimport { Container, Row, Col, Card } from '../../node_modules/react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nclass WorkFlow extends Component {\n\n    render () {\n        \n        return (\n          <Container className=\"mx-auto\">\n              <Row>\n                <Col className=\"mx-auto\">\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='goover'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={{\n                               pathname:'/execise',\n                               execiseProps:{\n                                   flowStep: 'goover',\n                                   firstTime: false\n                               }\n                               }}>Go Over</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='audit'>\n                        <Card.Body>\n                        <Card.Link as={Link} to={{\n                               pathname:'/execise',\n                               execiseProps:{\n                                   flowStep: 'audit',\n                                   round: 1\n                               }\n                               }}>Correction Check</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                    <Card className=\"mt-1\" style={{ width: '18rem' }} key='new'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/execise`}>New</Card.Link>\n                        </Card.Body>\n                    </Card>\n                </Col>\n              </Row>\n              <Row>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/execise`}>Try Again</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n              </Row>\n              <Row>\n                  <Col>\n                  <Card className=\"mt-1\" style={{ width: '18rem' }} key='trends'>\n                        <Card.Body>\n                           <Card.Link as={Link} to={`/summarise`}>Summarises</Card.Link>\n                        </Card.Body>\n                    </Card>\n                  </Col>\n              </Row>\n          </Container>\n        );\n    }\n}\n\nexport default WorkFlow","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createGafiveHistory = `mutation CreateGafiveHistory($input: CreateGafiveHistoryInput!) {\n  createGafiveHistory(input: $input) {\n    id\n    timestamp\n    itemId\n    response\n    result\n    round\n    genre\n  }\n}\n`;\nexport const updateGafiveHistory = `mutation UpdateGafiveHistory($input: UpdateGafiveHistoryInput!) {\n  updateGafiveHistory(input: $input) {\n    id\n    username\n    timestamp\n    itemId\n    response\n    result\n    round\n    genre\n  }\n}\n`;\nexport const deleteGafiveHistory = `mutation DeleteGafiveHistory($input: DeleteGafiveHistoryInput!) {\n  deleteGafiveHistory(input: $input) {\n    id\n    username\n    timestamp\n    itemId\n    response\n    result\n    round\n    genre\n  }\n}\n`;\n","import React from 'react';\nimport { Pie } from 'react-chartjs-2';\nimport { Link } from 'react-router-dom';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Button, Col, Row, Container } from 'react-bootstrap';\n\n\nexport const ResultPie = (props) => {\n\n    let data = {\n        labels: [\n            'Correct',\n            'Wrong'\n        ],\n        datasets: [{\n            data: [0,0],\n            backgroundColor: [\n            '#60ACFB',\n            '#AFE39B'\n            ],\n            hoverBackgroundColor: [\n            '#60ACFB',\n            '#AFE39B'\n            ]\n        }]\n    };\n\n    console.log (\"ResultPie: result - \", props.results);\n    let length = props.results.length;\n    let amountTrue = 0;\n    for (let i = 0; i < props.results.length; i++) {\n      if (props.results[i] === true) \n        amountTrue ++;\n    }\n\n    data.datasets[0].data[0] = amountTrue;\n    data.datasets[0].data[1] = length - amountTrue;\n\n    return (\n        <Container>\n            <h4 className=\"text-center\">{props.title}</h4>\n            <Pie data={data} />\n            <Row>\n                <Col></Col>\n                <Col>\n                <ul>\n                <li>Correct: {amountTrue}</li>\n                <li>Wrong: {length - amountTrue}</li>\n                </ul>\n                </Col>\n                <Col></Col>\n            </Row>\n            <Row>\n                <Col xs={6}>\n                <Button style={{ marginLeft: \"auto\" }} as={Link} to={props.nextUrl}>\n                    Back\n                </Button>\n                </Col>\n                <Col className=\"mx-auto\">\n                    <div />\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n","import React from 'react';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Button, ButtonGroup } from 'react-bootstrap';\n\nimport { MAX_RESULT_DISPLAY_IN_BAR } from '../consts/Const';\n\n\nexport const ResultBar = (props) => {\n    if (props.results == null)\n        return (<div></div>);\n\n    let results = props.results;\n    let offset = 0;\n\n    if (results.length > MAX_RESULT_DISPLAY_IN_BAR) {\n        let centerPoint = props.results.indexOf('-');\n        if (centerPoint >= MAX_RESULT_DISPLAY_IN_BAR) {\n            offset = parseInt(centerPoint/MAX_RESULT_DISPLAY_IN_BAR);\n            if ( (offset + 1) * MAX_RESULT_DISPLAY_IN_BAR >= results.length)\n                results = props.results.slice(offset*MAX_RESULT_DISPLAY_IN_BAR);\n            else\n                results = props.results.slice(offset*MAX_RESULT_DISPLAY_IN_BAR, \n                                              (offset+1)*MAX_RESULT_DISPLAY_IN_BAR);\n        }\n        else\n            results = props.results.slice(0, MAX_RESULT_DISPLAY_IN_BAR);\n    }\n\n    return (\n        <div className=\"bg-light\" style={{display: \"block\"}}>\n            <ButtonGroup>\n                { results.map ((result, index) => <Button\n                                                       variant={result === '-' ?\n                                                               'secondary' :\n                                                               result === true ?\n                                                               'success' : 'danger'}\n                                                       size=\"sm\"\n                                                       key={index}\n                                                       className=\"mr-1\"\n                                                       >\n                                                           {offset*MAX_RESULT_DISPLAY_IN_BAR+index+1}\n                                                       </Button>) }\n            </ButtonGroup>\n        </div>\n    )\n}","export const QUESTION_CONTENTS = [\n    'Identify which word is MOST SIMILAR in meaning to the word listed below.',\n    'Identify which word is MOST OPPOSITE in meaning to the workd listed below.',\n    'Identify which of the 5 options A-E matches LEAST WELL in meaning to the word listed below.',\n    'Each group has four words which can have similar meanings, and one word which is different. Find the odd one out.',\n    'In each of the following pieces of text, one word is missing. Complete it by choosing one from the options listed below.'\n];\n\nexport const QUESTION_TITLES = [\n    'Matching Words',\n    'Opposite Words',\n    'Words That Do Not Match',\n    'Odd One Out',\n    'Find The Missing Word'\n];\n\nexport const MAX_RESULT_DISPLAY_IN_BAR = 16;\n\nexport const DAILY_NEW_STUDY_ITEMS = 100;","import React from 'react';\n\n// CSS Styles\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Col, Row, Jumbotron, Fade, Button } from 'react-bootstrap';\n\nexport const Questions = (props) => {\n\n        const Title = () => {\n            return (\n                <div className=\"text-white bg-dark px-2\">\n                    {`GA500 index ${props.contents.index}`}\n                </div>\n            );\n        }\n        \n        const Choises = (props) => {\n            const contents = props.contents;\n\n            let choises = [contents.A, contents.B, contents.C, contents.D];\n        \n            return (\n                <fieldset>\n                    <Form.Group as={Row}>\n                    <Col sm={10}>\n                    { choises.map (choise => <Form.Check \n                                            type=\"radio\"\n                                            label={choise}\n                                            name=\"answer\"\n                                            id={choise} \n                                            value={choise}\n                                            onChange={props.handleOptionChange}\n                                            checked={props.selectedOption === choise}\n                                            key={choise}\n                                            disabled={props.buttonText === 'Next'} />)}\n                    </Col>\n                    </Form.Group>\n                </fieldset>\n            );\n        }\n        \n        const QuestionBody = (props) => {\n            const contents = props.contents;\n            \n            if (contents == null) \n                return (<div></div>);\n        \n            return (\n                    <Jumbotron>\n                        <h5> {contents.base} </h5>\n                        <br />\n                        <Choises \n                            contents={ contents }\n                            selectedOption={ props.selectedOption }\n                            handleOptionChange={ props.handleOptionChange}\n                            buttonText={ props.buttonText }\n                        />\n                    </Jumbotron>\n            );\n        }\n        \n        const Hint = (props) => {\n\n            let translations = [' ', ' '];\n\n            if (props.translation != null)\n                translations = props.translation.split(\"/\");\n\n            // console.log (\"translations:\", translations);\n            // console.log (\"props.translation:\", props.translation);\n\n            if (props.show) \n                if (props.positive)\n                    return (\n                        <div>\n                            <div id='hint'> \n                                <p className=\"text-success\">Correct! </p>\n                                {props.content}\n                            </div>\n                            <hr />\n                            <div>\n                            {translations.map ((translate, idx) => \n                                <p id={idx}>{translate}</p>) }\n                            </div>\n                        </div>\n                    );\n                else\n                    return (\n                        <div>\n                            <div id='hint'> \n                                <p> <font className=\"text-danger\">Not correct! </font> \n                                    The answer is \"{props.answer}\"</p> \n                                {props.content}\n                            </div>\n                            <hr />\n                            <div>\n                            { translations.map ((translate, idx) => \n                                <p id={idx} >{translate}</p>) }\n                            </div>\n                        </div>\n                    );\n\n            return (<Fade in={false}><div id='hint'></div></Fade>)\n        }\n\n        // const buttonText = props.selectedOption === ''? 'Submit':'Next';\n\n        return (\n            <div>\n                <Title />\n                <QuestionBody \n                    contents={ props.contents }\n                    selectedOption={ props.selectedOption }\n                    handleOptionChange={ props.handleOptionChange }\n                />\n                {/* float button to right */}\n                <Row> \n                    <Col xs={6}>\n                        <div style={{display: \"flex\"}}>\n                            <Button \n                                style={{ marginLeft: \"auto\" }} \n                                id=\"submit\" \n                                onClick={props.onClick}\n                                disabled={props.buttonText!==\"Submit\"}>\n                                Submit </Button>\n                        </div>\n                    </Col>\n                    <Col xs={6}>\n                        <div style={{display: \"flex\"}}>\n                            <Button \n                                style={{ marginLeft: \"auto\" }} \n                                id=\"next\" \n                                onClick={props.onClick}\n                                disabled={props.buttonText!==\"Next\"}>\n                                Next </Button>\n                        </div>\n                    </Col> \n                </Row>\n                <Row>\n                    <Hint show={ props.buttonText === 'Next' } \n                          content={ props.contents.Hint }\n                          positive={ props.selectedOption === props.contents.Answer }\n                          answer={ props.contents.Answer }\n                          translation={ props.contents.translation }\n                        />\n                </Row>\n            </div>\n        );\n    }\n","import React, { Component } from 'react';\nimport { graphqlOperation } from \"aws-amplify\";\n\nimport { Connect } from \"aws-amplify-react\";\nimport * as queries from '../graphql/queries';\nimport * as mutations from '../graphql/mutations'\n// import * as subscriptions from './graphql/subscriptions';\n\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Button} from 'react-bootstrap';\nimport { withRouter } from 'react-router';\n\nimport { DAILY_NEW_STUDY_ITEMS } from '../consts/Const';\nimport { getFormatedDate, getFormatedTimestamp, randomsort } from '../consts/Utilities';\n\nimport { ResultPie } from './ResultPie';\nimport { ResultBar } from './ResultBar';\nimport { Questions } from './Questions';\n\nimport positiveSnd from '../Resources/correct.mp3';\nimport negativeSnd from '../Resources/wrong.wav';\n\n\nclass Execise extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            results: [],\n            currentIndex: 0,\n            mounted: false,\n            sendHistory: null,\n            updateHistory: null,\n            buttonText: 'Submit',\n            selectedOption: '',\n            loading: true,\n            flowStep: this.props.location.execiseProps.flowStep,\n            round: this.props.location.execiseProps.round,\n            remainSeconds: this.props.location.execiseProps.timeoutValue // todo, configurable later\n        };\n        this.playPositiveSnd = this.playPositiveSnd.bind(this);\n        this.positiveSnd = new Audio(positiveSnd);\n        this.playNegativeSnd = this.playNegativeSnd.bind(this);\n        this.negativeSnd = new Audio(negativeSnd);\n    }\n\n    playPositiveSnd(){\n        this.positiveSnd.play();\n    }\n\n    playNegativeSnd(){\n        this.negativeSnd.play();\n    }\n\n    // async \n    async addHistory (sendHistory, userAnswer) {\n        const currentItem = this.state.items[this.state.currentIndex];\n        const date = new Date();\n     \n        const input = {\n            timestamp: getFormatedTimestamp(date),\n            itemId: currentItem.index,\n            response: userAnswer,\n            result: userAnswer === currentItem.Answer,\n            round: currentItem.round,\n            genre: 'test'\n        }\n    \n        try {\n            console.log ('addHistory:', input);\n            await sendHistory({input})\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    async updateHistoryReviewed (updateHistory, id) {\n        const input = {\n            id,\n            genre: 'reviewed'\n        }\n\n        try {\n            await updateHistory({input})\n        } catch (err) {\n            console.error(err);\n        }\n    }\n\n    handleSubmit = () => {\n        let currentItem = this.state.items[this.state.currentIndex];\n\n        if (this.state.buttonText === 'Next') {\n            if (this.state.currentIndex + 1 < this.state.items.length) {\n                let nextItem = this.state.items[this.state.currentIndex+1];\n\n                console.log ('handleSubmit: nextItem-', nextItem);\n                if (nextItem.type === 'Maths' || nextItem.type === 'Pattern' || nextItem.type === 'Logic')\n                   this.setState({remainSeconds: 150});\n                else\n                   this.setState({remainSeconds: this.props.location.execiseProps.timeoutValue});\n            }\n            // clear state\n            this.setState({\n                selectedOption: '',\n                buttonText: 'Submit',\n            });\n            // move to next item\n            this.setState({ currentIndex: this.state.currentIndex + 1 });\n            this.resetCoundDown();\n        }\n        // the user made choise / selected one of the radio input\n        else if (this.state.selectedOption.length > 0 ) {\n            this.setState({ \n                buttonText: 'Next',\n                remainSeconds: ''\n             });\n             clearInterval(this.interval);\n             this.state.results[this.state.currentIndex] = (this.state.selectedOption === currentItem.Answer);\n             (this.state.selectedOption === currentItem.Answer) ? this.playPositiveSnd() : this.playNegativeSnd ();\n             this.addHistory (this.state.sendHistory, this.state.selectedOption);\n             if (this.state.items[this.state.currentIndex].historyId !== \"\") {\n                 this.updateHistoryReviewed (this.state.updateHistory, this.state.items[this.state.currentIndex].historyId )\n             }\n        }\n        //console.log(\"You have submitted:\", result);\n    }\n\n    handleOptionChange = changeEvent => {\n        this.setState({\n            selectedOption: changeEvent.target.value\n        });\n    }\n\n    shuffleItemAnswers(index) {\n        let currentItem = this.state.items[index];\n        let choises = [currentItem.A, currentItem.B, currentItem.C, currentItem.D];\n        // random the choises list sequence\n        choises.sort(randomsort);    \n        this.state.items[index].A = choises[0];\n        this.state.items[index].B = choises[1];\n        this.state.items[index].C = choises[2];\n        this.state.items[index].D = choises[3];\n    }\n    \n    resetCoundDown = () => {\n        clearInterval(this.interval);\n        this.interval = setInterval(this.tick, 1000);\n    }\n\n    timesUp = () => {\n        if (this.state.selectedOption === '') {\n            this.setState({\n                selectedOption: 'Not answered'\n            })\n        }\n        this.handleSubmit ();\n    }\n\n    tick = () => {\n        // console.log(\"Countdown:\", this.state.remainSeconds);\n        \n        if (this.state.remainSeconds === '') \n            clearInterval (this.interval);\n        else {\n            const remainSeconds = this.state.remainSeconds - 1;\n            \n            this.setState({remainSeconds});\n\n            if ( remainSeconds <= 0 ) {\n                clearInterval(this.interval);\n                this.timesUp ();\n            }\n        }\n    }\n\n    componentDidMount() {\n        console.log ('exec flow step:', this.props.location.execiseProps);\n            \n        // if (this.props.location.execiseProps.round > 1)\n        // this.state.flowStep = \"goover\";\n            \n        this.state.mounted = true;\n            \n        this.interval = setInterval(this.tick, 1000);\n    }\n\n    organiseDate =(flowStep, data) => {\n\n        const type = Object.keys(data)[0];\n        let itemData = data[type];\n\n        console.log ('Execise: organiseData flowType ', flowStep, \n                        ', data type - ', type, ', data length - ', data.length);\n\n        switch (flowStep) {\n            case 'study':\n                // if (itemData.items.length < 60) {\n                if (type !== 'queryQuestionsByIndex') {\n                    console.log ('Execise: Expected <study> Items, but got type - ', type);\n                    return (<div></div>);\n                }\n\n                this.state.flowStep = \"done\";\n                break;\n            case 'goover':\n                // if (itemData.items.length + this.state.items.length > 60)\n                    // itemData.items = itemData.items.slice(0, 60 - this.state.items.length);\n                if (type !== 'getHistoryItemsList') {\n                    console.log ('Execise: Expected <goover> items, but got type - ', type);\n                    return (<div></div>);\n                }\n                this.state.flowStep = \"done\";\n                break;\n            // case 'audit': \n            //     // randomly pick 20 questions which answered correctly.\n            //     itemData.items.sort(randomsort);\n            //     itemData.items = itemData.items.slice(0, 20);\n            //     this.state.flowStep = \"done\";\n            //     break;\n            default:\n                break;\n        }\n\n        const existingItemsLen = this.state.items.length;\n        const date = new Date();\n        const today = getFormatedDate(date) + 'T00:00:00Z'; \n\n        if (this.state.flowStep === \"done\" && this.state.items.length > 0) {\n            let firstItemType = this.state.items[0].type;\n            if (firstItemType === 'Maths' || firstItemType === 'Pattern' || firstItemType === 'Logic') {\n                console.log(\"firt time is maths, set timer to 150\");\n                this.state.remainSeconds = 150;\n            }\n        }\n         // initiate result.\n         for (let index = 0; index < itemData.items.length; index ++) {\n         //   add today's error into review \n         //   if (type === 'getHistoryItemsList' && itemData.items[index].timestamp >= today) \n         //       break;\n\n            switch (type) {\n                case 'queryQuestionsByIndex' :\n                    this.state.items[existingItemsLen + index] = itemData.items[index];\n                    this.state.items[existingItemsLen + index].historyId = \"\";\n                    this.state.items[existingItemsLen + index].round = 1;\n                break;\n                case 'getHistoryItemsList' :                        \n                    this.state.items[existingItemsLen + index] = itemData.items[index].content;\n                    this.state.items[existingItemsLen + index].historyId = itemData.items[index].id;\n                    this.state.items[existingItemsLen + index].round = itemData.items[index].round + 1;\n                    this.state.items[existingItemsLen + index].index = itemData.items[index].itemId;\n                    break;\n                default:\n                    break;\n            }\n            this.state.results[existingItemsLen + index] = '-';\n            this.shuffleItemAnswers (existingItemsLen + index);\n        }\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    render() {\n\n        // Data already retrieved, show questions or result summary\n        if (this.state.flowStep === \"done\") {\n            if (this.state.currentIndex >= this.state.items.length) {\n                let title = getFormatedDate( new Date() );\n                // return (<div></div>);\n                return(<ResultPie \n                            title={ title }\n                            results={ this.state.results }\n                            nextUrl='/'\n                            />);\n            }\n\n            return (\n                <Container>\n                    <ResultBar \n                        results={ this.state.results } \n                    />\n                    <Questions \n                        contents={ this.state.items[this.state.currentIndex] }\n                        handleOptionChange={ this.handleOptionChange }\n                        selectedOption={ this.state.selectedOption }\n                        onClick={ this.handleSubmit }\n                        buttonText={ this.state.buttonText }\n                    />\n                    <div>\n                        { this.state.remainSeconds }\n                    </div>\n                </Container>\n            );\n        }\n\n        // no items loaded\n        // wait component mount\n        if (!this.state.mounted)\n            return(<Container> Loading </Container>);\n\n        // No data, retrieve it first. \n        switch (this.state.flowStep) {\n            case \"study\" :\n                return (\n                    <div>\n                        <Connect mutation={graphqlOperation(mutations.createGafiveHistory)}>\n                        {({mutation}) => {\n                            this.state.sendHistory = mutation;\n                            console.log ('sendHistory assigned.');          \n                        }}\n                        </Connect>\n\n                        <Connect mutation={graphqlOperation(mutations.updateGafiveHistory)}>\n                        {({mutation}) => {\n                            this.state.updateHistory = mutation;\n                            console.log ('updateHistory assigned.');\n                        }}\n                        </Connect>\n\n                        <Connect query={graphqlOperation( queries.queryQuestionsByIndex, \n                                            {index: this.props.location.execiseProps.lastFinishedIndex, \n                                            limit: DAILY_NEW_STUDY_ITEMS} )}>\n                            {({ data, loading, errors }) => {\n                \n                                if (loading || !data) return (<h3>Loading...</h3>);\n                                if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n                                this.organiseDate (\"study\", data);\n                            \n                                console.log ('result array: ', this.state.results);                   \n\n                            }}\n                        </Connect>\n                        \n                    </div>\n                );\n            case \"goover\":\n                return (\n                    <div>\n                        <Connect mutation={graphqlOperation(mutations.createGafiveHistory)}>\n                            {({mutation}) => {\n                                this.state.sendHistory = mutation;\n                                console.log ('sendHistory assigned.');          \n                            }}\n                            </Connect>\n\n                            <Connect mutation={graphqlOperation(mutations.updateGafiveHistory)}>\n                            {({mutation}) => {\n                                this.state.updateHistory = mutation;\n                                console.log ('updateHistory assigned.');\n                            }}\n                        </Connect>\n\n                        <Connect query={graphqlOperation( queries.getHistoryItemsList, \n                                                    {filter: { result: {eq: false}, // only round1 false counted\n                                                               round: {eq: 1} },\n                                                                //, everytime will redo \n                                                               //genre:  {ne: \"reviewed\"} } , //yesterday's false\n                                                     limit: 1000} )}>\n                            {({ data, loading, errors }) => {\n                                        \n                                        if (loading || !data) return (<h3>Loading...</h3>);\n                                        if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n                                        this.organiseDate (\"goover\", data);\n                                    \n                                        console.log ('result array: ', this.state.results);\n                            }}\n\n                        </Connect>\n                    </div>\n                );\n            // case \"audit\":\n            //     return (\n            //         <div>\n            //             <Connect mutation={graphqlOperation(mutations.createGafiveHistory)}>\n            //             {({mutation}) => {\n            //                 this.state.sendHistory = mutation;\n            //                 console.log ('sendHistory assigned.');          \n            //             }}\n            //             </Connect>\n\n            //             <Connect mutation={graphqlOperation(mutations.updateGafiveHistory)}>\n            //             {({mutation}) => {\n            //                 this.state.updateHistory = mutation;\n            //                 console.log ('updateHistory assigned.');\n            //             }}\n            //             </Connect>\n\n            //             <Connect query={graphqlOperation( queries.getHistoryItemsList, \n            //                                         {filter: { result: {eq: true},\n            //                                                 genre: {eq: \"test\"} } , \n            //                                         limit: 500} )}>\n            //                 {({ data, loading, errors }) => {\n                                        \n            //                             if (loading || !data) return (<h3>Loading...</h3>);\n            //                             if (errors.lenth > 0 ) return (<h3>Error</h3>);\n\n            //                             this.organiseDate (\"audit\", data);\n                                    \n            //                             console.log ('result array: ', this.state.results);\n            //                 }}\n\n            //             </Connect>\n            //         </div>\n            //     );\n            default:\n                return (<div></div>);\n         }\n    }\n}\n\nexport default withRouter(Execise);","import React, { Component } from \"react\";\nimport Amplify from \"aws-amplify\";\nimport awsconfig from './appconfig';\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\n// import MasterChoises from \"./Components/QAFiveChoises\";\nimport Home from \"./Components/Home\";\n// import Trends from \"./Components/Trends\";\n// import Lessons from \"./Components/Lessons\";\nimport Settings from \"./Components/Settings\";\nimport WorkFlow from \"./Components/WorkFlow\";\nimport Execise from \"./Components/Execise\"\n\nimport { withAuthenticator } from \"aws-amplify-react\";\n\nAmplify.configure(awsconfig);\n\nclass App extends Component {\n    render () {\n        Amplify.Logger.LOG_LEVEL = 'VERBOSE';\n\n        // console.log(\"Your process.env.PUBLIC_URL\", process.env.PUBLIC_URL);\n\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <Switch>\n                    {/* <Route exact path=\"/questions/:round/:startidx\" component={MasterChoises} /> */}\n                    {/* <Route path=\"/lessons\" component={Lessons} />\n                    <Route path=\"/trends\" component={Trends} /> */}\n                    <Route path=\"/settings\" component={Settings} />\n                    <Route path=\"/workflow\" component={WorkFlow} />\n                    <Route path=\"/execise\" component={Execise} />\n                    <Route path=\"/\" component={Home} />\n                </Switch>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default withAuthenticator(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}